---
description: 
globs: 
alwaysApply: true
---
# Commit Standards

## 1. Atomic Commits (Primary Focus)
Every commit must be atomic - a single, focused change that:
- Represents one logical change
- Is self-contained and independently reviewable
- Can be reverted without affecting other changes
- Makes the codebase better than before

### How to Create Atomic Commits
1. Break down large changes into smaller, focused commits
2. Each commit should do one thing and do it well
3. Group related changes together
4. Separate unrelated changes into different commits

### Examples of Atomic Commits
✅ Good:
```
feat(auth): implement OAuth2 login
feat(auth): add password reset functionality
test(auth): add OAuth2 login tests
```

❌ Bad:
```
feat: implement authentication system with OAuth2 and password reset
```

## 2. Conventional Commits Format
Every commit message must follow this format:
```
<type>(<scope>): <description>

[optional body]

[optional footer(s)]
```

### Types
- `feat`: A new feature
- `fix`: A bug fix
- `docs`: Documentation only changes
- `style`: Changes that do not affect the meaning of the code
- `refactor`: A code change that neither fixes a bug nor adds a feature
- `perf`: A code change that improves performance
- `test`: Adding missing tests or correcting existing tests
- `chore`: Changes to the build process or auxiliary tools
- `ci`: Changes to CI configuration files and scripts

### Examples of Good Commit Messages
✅ Good:
```
feat(auth): add OAuth2 authentication
fix(api): resolve rate limiting issue
docs(readme): update installation instructions
```

❌ Bad:
```
update auth system
fixed some bugs
changes to API
```

## Best Practices
1. Review changes before committing
2. Use `git add -p` to stage changes selectively
3. Keep commit messages clear and descriptive
4. Keep the first line under 72 characters
5. Use the body for detailed explanations
6. Consider the reviewer's perspective
7. Make commits that tell a story

## Commit Workflow

1. **Repository Status Check**
   - Run `git status` to identify modified, added, or deleted files.
   - Use `git diff` to examine the changes made to each file in detail.

2. **Analysis and Commit Planning**
   - Analyze the nature of the changes (new features, bug fixes, refactoring, documentation, tests, etc.).
   - Group changes by functional or technical logic to ensure each commit is atomic and coherent.
   - Explain the commit plan: for each planned commit, briefly detail what it will contain and the associated Conventional Commit type (feat, fix, test, etc.).

3. **Commit Preparation**
   - Use `git add -p` or fine-grained selection to stage only the changes corresponding to each planned commit.
   - Write the commit message strictly following the Conventional Commits specification (type, optional scope, concise description).

4. **Change Review**
   - Before proceeding with the commit, perform a final review of the staged changes (`git diff --staged`) to ensure they match the announced plan and no unwanted changes are included.
   - Present the diff or a summary of the changes to the user for validation.

5. **User Validation**
   - Explicitly wait for user validation before executing the commits.
   - If modifications or adjustments are requested, take them into account before proceeding.

6. **Commit Execution**
   - Once validated, perform the commits one by one, respecting the order and granularity defined in the plan.

7. **Systematic Best Practices**
   - Always keep commits atomic and independent.
   - Use clear, concise, and informative commit messages.
   - Never include unrelated changes in the same commit.
   - Document complex changes in the commit message body if necessary.
   - Ensure the code remains consistent, tested, and documented at each step.
